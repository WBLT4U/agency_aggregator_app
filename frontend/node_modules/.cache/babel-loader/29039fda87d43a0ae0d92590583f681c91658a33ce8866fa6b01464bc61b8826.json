{"ast":null,"code":"var _jsxFileName = \"c:\\\\xampp\\\\htdocs\\\\agency-aggregator\\\\frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport AdminDashboard from '../components/AdminDashboard';\nimport AgencyDashboard from '../components/AgencyDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [role, setRole] = useState(null); // Stores the user role ('admin' or 'agency')\n  const [loading, setLoading] = useState(true); // Tracks the loading state\n  const [error, setError] = useState(null); // Tracks any errors during profile fetch\n  const navigate = useNavigate(); // For programmatic navigation\n\n  // Effect that runs on component mount to fetch user role\n  useEffect(() => {\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n\n    // If token is missing, redirect to login page\n    if (!token) {\n      navigate('/login');\n    } else {\n      const fetchUserProfile = async () => {\n        try {\n          // Make a request to the backend to fetch the user's profile\n          const response = await axios.get('http://localhost:5000/api/agency/profile', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            } // Send the JWT token in the Authorization header\n          });\n          setRole(response.data.role); // Set the user's role (either 'admin' or 'agency')\n          setLoading(false); // Stop loading once the role is fetched\n        } catch (err) {\n          console.error('Error fetching user profile:', err);\n          setError('Failed to fetch user role. Please try again.');\n          setLoading(false); // Stop loading if there is an error\n        }\n      };\n      fetchUserProfile(); // Invoke the function to fetch profile data\n    }\n  }, [navigate]); // Dependency array includes navigate, so this effect runs when component mounts or when navigate changes\n\n  // Logout function to clear the token and redirect to login page\n  const handleLogout = () => {\n    localStorage.removeItem('token'); // Remove the token from localStorage\n    navigate('/login'); // Redirect to login page\n  };\n\n  // While fetching profile, show a loading message\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading dashboard...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If an error occurred during profile fetch, show the error message\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: role === 'admin' ? /*#__PURE__*/_jsxDEV(AdminDashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(AgencyDashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"Gz21xl5mDqD8dlg0SG0pgEh1SJY=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","AdminDashboard","AgencyDashboard","jsxDEV","_jsxDEV","Dashboard","_s","role","setRole","loading","setLoading","error","setError","navigate","token","localStorage","getItem","fetchUserProfile","response","get","headers","Authorization","data","err","console","handleLogout","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["c:/xampp/htdocs/agency-aggregator/frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport AdminDashboard from '../components/AdminDashboard';\nimport AgencyDashboard from '../components/AgencyDashboard';\n\nconst Dashboard = () => {\n  const [role, setRole] = useState(null);  // Stores the user role ('admin' or 'agency')\n  const [loading, setLoading] = useState(true);  // Tracks the loading state\n  const [error, setError] = useState(null);  // Tracks any errors during profile fetch\n  const navigate = useNavigate();  // For programmatic navigation\n\n  // Effect that runs on component mount to fetch user role\n  useEffect(() => {\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n   \n    // If token is missing, redirect to login page\n    if (!token) {\n      navigate('/login');\n    } else {\n      const fetchUserProfile = async () => {\n        try {\n          // Make a request to the backend to fetch the user's profile\n          const response = await axios.get('http://localhost:5000/api/agency/profile', {\n            headers: { Authorization: `Bearer ${token}` },  // Send the JWT token in the Authorization header\n          });\n          setRole(response.data.role);  // Set the user's role (either 'admin' or 'agency')\n          setLoading(false);  // Stop loading once the role is fetched\n        } catch (err) {\n          console.error('Error fetching user profile:', err);\n          setError('Failed to fetch user role. Please try again.');\n          setLoading(false);  // Stop loading if there is an error\n        }\n      };\n\n      fetchUserProfile();  // Invoke the function to fetch profile data\n    }\n  }, [navigate]);  // Dependency array includes navigate, so this effect runs when component mounts or when navigate changes\n\n  // Logout function to clear the token and redirect to login page\n  const handleLogout = () => {\n    localStorage.removeItem('token');  // Remove the token from localStorage\n    navigate('/login');  // Redirect to login page\n  };\n\n  // While fetching profile, show a loading message\n  if (loading) {\n    return <p>Loading dashboard...</p>;\n  }\n\n  // If an error occurred during profile fetch, show the error message\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div>\n      {/* Header with logout button */}\n      <header>\n        <button onClick={handleLogout}>Logout</button>\n      </header>\n\n      {/* Main content area: Render AdminDashboard or AgencyDashboard based on user role */}\n      <main>\n        {role === 'admin' ? <AdminDashboard /> : <AgencyDashboard />}\n      </main>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}